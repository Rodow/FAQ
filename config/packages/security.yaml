security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    encoders:
        App\Entity\User: # je definit quelle entité sera a encodé (note c'est ici que getPassword est obligatoire)
            algorithm: bcrypt # attention argon2i remplacera sous peu cette methode

    providers:
        app_provider:
            entity:
                class: App\Entity\User
                property: username

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            provider: app_provider
            guard:
                authenticators:
                    - App\Security\LoginFormAuthenticator
            logout:
                path: app_logout # ATTENTION : une route dans routes.yml doit être créée !
            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    access_control: # ATTENTION la fonction getroles est necessaire  pour symfony
        - { path: '^\/question\/poser-une-question', roles: ROLE_USER }
        - { path: '^\/question\/[0-9]+\/edit', roles: ROLE_ADMIN }
        - { path: '^\/question\/[0-9]+', roles: ROLE_ADMIN,  methods: DELETE }
        - { path: '^\/backend', roles: ROLE_ADMIN }
        - { path: '^\/question\/[0-9]+/desactiver', roles: ROLE_MODERATOR}
        - { path: '^\/question\/[0-9]+/activer', roles: ROLE_MODERATOR}
    
    # Pour indiquer qu'un role en contient un autre , je dois rendre explicite ma hierarchie
    # ici role_admin contient a minima aussi les accès du role_user
    role_hierarchy:
        ROLE_ADMIN: ROLE_MODERATOR
        ROLE_MODERATOR: ROLE_USER